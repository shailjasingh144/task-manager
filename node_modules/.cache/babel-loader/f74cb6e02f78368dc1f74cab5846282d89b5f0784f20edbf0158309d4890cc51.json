{"ast":null,"code":"// src/firebase/firestoreService.js\n\nimport { collection, addDoc, doc, setDoc, getDocs, query, where } from \"firebase/firestore\";\nimport { db } from \"./firebase\"; // Import the Firestore instance\n\n// Function to add a project\nexport const addProject = async projectData => {\n  try {\n    const docRef = await addDoc(collection(db, \"projects\"), projectData);\n    console.log(\"Project added with ID: \", docRef.id);\n    return docRef.id; // Returning project ID\n  } catch (e) {\n    console.error(\"Error adding project: \", e);\n    throw new Error(e.message);\n  }\n};\n\n// Function to add a task to a project\nexport const addTask = async (projectId, taskData) => {\n  try {\n    const projectRef = doc(db, \"projects\", projectId);\n    await setDoc(doc(projectRef, \"tasks\", taskData.id), taskData);\n    console.log(\"Task added to project!\");\n  } catch (e) {\n    console.error(\"Error adding task: \", e);\n    throw new Error(e.message);\n  }\n};\n\n// Function to get all projects\nexport const getProjects = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, \"projects\"));\n    const projects = [];\n    querySnapshot.forEach(doc => {\n      projects.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return projects;\n  } catch (e) {\n    console.error(\"Error fetching projects: \", e);\n    throw new Error(e.message);\n  }\n};\n\n// Function to get tasks of a specific project\nexport const getTasksForProject = async projectId => {\n  try {\n    const taskQuerySnapshot = await getDocs(collection(db, \"projects\", projectId, \"tasks\"));\n    const tasks = [];\n    taskQuerySnapshot.forEach(taskDoc => {\n      tasks.push({\n        id: taskDoc.id,\n        ...taskDoc.data()\n      });\n    });\n    return tasks;\n  } catch (e) {\n    console.error(\"Error fetching tasks: \", e);\n    throw new Error(e.message);\n  }\n};\nexport const getUsersByRole = async role => {\n  try {\n    const usersQuery = query(collection(db, \"users\"), where(\"role\", \"==\", role));\n    const querySnapshot = await getDocs(usersQuery);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      users.push({\n        id: doc.id,\n        ...doc.data()\n      }); // Push user data to users array\n    });\n    return users;\n  } catch (e) {\n    console.error(\"Error fetching users: \", e);\n    throw new Error(e.message);\n  }\n};","map":{"version":3,"names":["collection","addDoc","doc","setDoc","getDocs","query","where","db","addProject","projectData","docRef","console","log","id","e","error","Error","message","addTask","projectId","taskData","projectRef","getProjects","querySnapshot","projects","forEach","push","data","getTasksForProject","taskQuerySnapshot","tasks","taskDoc","getUsersByRole","role","usersQuery","users"],"sources":["C:/Users/RISHABH SINGH/OneDrive/Desktop/project-management-dashboard/src/firestoreService.js"],"sourcesContent":["// src/firebase/firestoreService.js\r\n\r\nimport { collection, addDoc, doc, setDoc, getDocs, query, where } from \"firebase/firestore\";\r\nimport { db } from \"./firebase\"; // Import the Firestore instance\r\n\r\n// Function to add a project\r\nexport const addProject = async (projectData) => {\r\n  try {\r\n    const docRef = await addDoc(collection(db, \"projects\"), projectData);\r\n    console.log(\"Project added with ID: \", docRef.id);\r\n    return docRef.id; // Returning project ID\r\n  } catch (e) {\r\n    console.error(\"Error adding project: \", e);\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\n// Function to add a task to a project\r\nexport const addTask = async (projectId, taskData) => {\r\n  try {\r\n    const projectRef = doc(db, \"projects\", projectId);\r\n    await setDoc(doc(projectRef, \"tasks\", taskData.id), taskData);\r\n    console.log(\"Task added to project!\");\r\n  } catch (e) {\r\n    console.error(\"Error adding task: \", e);\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\n// Function to get all projects\r\nexport const getProjects = async () => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, \"projects\"));\r\n    const projects = [];\r\n    querySnapshot.forEach((doc) => {\r\n      projects.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return projects;\r\n  } catch (e) {\r\n    console.error(\"Error fetching projects: \", e);\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\n// Function to get tasks of a specific project\r\nexport const getTasksForProject = async (projectId) => {\r\n  try {\r\n    const taskQuerySnapshot = await getDocs(collection(db, \"projects\", projectId, \"tasks\"));\r\n    const tasks = [];\r\n    taskQuerySnapshot.forEach((taskDoc) => {\r\n      tasks.push({ id: taskDoc.id, ...taskDoc.data() });\r\n    });\r\n    return tasks;\r\n  } catch (e) {\r\n    console.error(\"Error fetching tasks: \", e);\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\n\r\nexport const getUsersByRole = async (role) => {\r\n    try {\r\n      const usersQuery = query(collection(db, \"users\"), where(\"role\", \"==\", role));\r\n      const querySnapshot = await getDocs(usersQuery);\r\n      const users = [];\r\n      querySnapshot.forEach((doc) => {\r\n        users.push({ id: doc.id, ...doc.data() }); // Push user data to users array\r\n      });\r\n      return users;\r\n    } catch (e) {\r\n      console.error(\"Error fetching users: \", e);\r\n      throw new Error(e.message);\r\n    }\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}