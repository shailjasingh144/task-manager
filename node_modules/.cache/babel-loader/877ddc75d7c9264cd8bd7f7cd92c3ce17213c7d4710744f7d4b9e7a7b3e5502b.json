{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RISHABH SINGH\\\\OneDrive\\\\Desktop\\\\project-management-dashboard\\\\src\\\\component\\\\Dashboard\\\\ManagerDashboard\\\\ManagerDashboard.js\",\n  _s = $RefreshSig$();\n// src/components/ManagerDashboard/ManagerDashboard.jsx\n\nimport React, { useState, useEffect } from \"react\";\nimport { getProjects, addProject } from \"../../../firestoreService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ManagerDashboard() {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Fetch projects from Firestore\n  useEffect(() => {\n    const fetchProjects = async () => {\n      setLoading(true);\n      try {\n        const fetchedProjects = await getProjects();\n        setProjects(fetchedProjects); // Save fetched projects to state\n      } catch (e) {\n        console.error(\"Error fetching projects: \", e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, []);\n\n  // Function to handle adding a new project\n  const handleAddProject = async () => {\n    const newProject = {\n      name: \"New Project\",\n      description: \"Description of the new project\",\n      tasks: []\n    };\n    try {\n      const projectId = await addProject(newProject); // Add project to Firestore\n      // After adding the project, you can reload the projects list or just update the state\n      setProjects(prev => [...prev, {\n        ...newProject,\n        id: projectId\n      }]);\n    } catch (e) {\n      console.error(\"Error adding project: \", e);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Manager Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddProject,\n      disabled: loading,\n      children: loading ? \"Adding...\" : \"Add New Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: project.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), \": \", project.description]\n      }, project.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ManagerDashboard, \"A9/wWT6pOczPHkV7KpQHOJGRrgk=\");\n_c = ManagerDashboard;\nexport default ManagerDashboard;\nvar _c;\n$RefreshReg$(_c, \"ManagerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","getProjects","addProject","jsxDEV","_jsxDEV","ManagerDashboard","_s","projects","setProjects","loading","setLoading","fetchProjects","fetchedProjects","e","console","error","handleAddProject","newProject","name","description","tasks","projectId","prev","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","project","_c","$RefreshReg$"],"sources":["C:/Users/RISHABH SINGH/OneDrive/Desktop/project-management-dashboard/src/component/Dashboard/ManagerDashboard/ManagerDashboard.js"],"sourcesContent":["// src/components/ManagerDashboard/ManagerDashboard.jsx\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { getProjects, addProject } from \"../../../firestoreService\"\r\n\r\nfunction ManagerDashboard() {\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch projects from Firestore\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const fetchedProjects = await getProjects();\r\n        setProjects(fetchedProjects); // Save fetched projects to state\r\n      } catch (e) {\r\n        console.error(\"Error fetching projects: \", e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  // Function to handle adding a new project\r\n  const handleAddProject = async () => {\r\n    const newProject = {\r\n      name: \"New Project\",\r\n      description: \"Description of the new project\",\r\n      tasks: [],\r\n    };\r\n\r\n    try {\r\n      const projectId = await addProject(newProject); // Add project to Firestore\r\n      // After adding the project, you can reload the projects list or just update the state\r\n      setProjects((prev) => [...prev, { ...newProject, id: projectId }]);\r\n    } catch (e) {\r\n      console.error(\"Error adding project: \", e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Manager Dashboard</h1>\r\n      <button onClick={handleAddProject} disabled={loading}>\r\n        {loading ? \"Adding...\" : \"Add New Project\"}\r\n      </button>\r\n      <ul>\r\n        {projects.map((project) => (\r\n          <li key={project.id}>\r\n            <strong>{project.name}</strong>: {project.description}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ManagerDashboard;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,UAAU,QAAQ,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnE,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCD,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAME,eAAe,GAAG,MAAMX,WAAW,CAAC,CAAC;QAC3CO,WAAW,CAACI,eAAe,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,CAAC,CAAC;MAC/C,CAAC,SAAS;QACRH,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,UAAU,GAAG;MACjBC,IAAI,EAAE,aAAa;MACnBC,WAAW,EAAE,gCAAgC;MAC7CC,KAAK,EAAE;IACT,CAAC;IAED,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMnB,UAAU,CAACe,UAAU,CAAC,CAAC,CAAC;MAChD;MACAT,WAAW,CAAEc,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAE,GAAGL,UAAU;QAAEM,EAAE,EAAEF;MAAU,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOR,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,CAAC,CAAC;IAC5C;EACF,CAAC;EAED,oBACET,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BxB,OAAA;MAAQyB,OAAO,EAAEb,gBAAiB;MAACc,QAAQ,EAAErB,OAAQ;MAAAe,QAAA,EAClDf,OAAO,GAAG,WAAW,GAAG;IAAiB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACTxB,OAAA;MAAAoB,QAAA,EACGjB,QAAQ,CAACwB,GAAG,CAAEC,OAAO,iBACpB5B,OAAA;QAAAoB,QAAA,gBACEpB,OAAA;UAAAoB,QAAA,EAASQ,OAAO,CAACd;QAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,MAAE,EAACI,OAAO,CAACb,WAAW;MAAA,GAD9Ca,OAAO,CAACT,EAAE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACtB,EAAA,CArDQD,gBAAgB;AAAA4B,EAAA,GAAhB5B,gBAAgB;AAuDzB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}